# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.ClientScopes do
  @moduledoc """
  API calls for all endpoints tagged `ClientScopes`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_scopes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_client_scopes_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/client-scopes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete the client scope

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client scope (not name)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_scopes_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_client_scopes_id_delete(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/client-scopes/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get representation of the client scope

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client scope (not name)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ClientScopeRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_scopes_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ClientScopeRepresentation.t} | {:error, Tesla.Env.t}
  def realm_client_scopes_id_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/client-scopes/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ClientScopeRepresentation{}}
    ])
  end

  @doc """
  Update the client scope

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client scope (not name)
  - client_scope_representation (ClientScopeRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_scopes_id_put(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.ClientScopeRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_client_scopes_id_put(connection, realm, id, client_scope_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/client-scopes/#{id}")
    |> add_param(:body, :body, client_scope_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Create a new client scope   Client Scopeâ€™s name must be unique!

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_scope_representation (ClientScopeRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_scopes_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.ClientScopeRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_client_scopes_post(connection, realm, client_scope_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/client-scopes")
    |> add_param(:body, :body, client_scope_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end
end
