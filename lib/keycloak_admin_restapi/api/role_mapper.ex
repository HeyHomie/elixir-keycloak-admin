# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.RoleMapper do
  @moduledoc """
  API calls for all endpoints tagged `RoleMapper`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Get role mappings

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.MappingsRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_groups_id_role_mappings_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.MappingsRepresentation.t} | {:error, Tesla.Env.t}
  def realm_groups_id_role_mappings_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/groups/#{id}/role-mappings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.MappingsRepresentation{}}
    ])
  end

  @doc """
  Get realm-level roles that can be mapped

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_groups_id_role_mappings_realm_available_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_groups_id_role_mappings_realm_available_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/groups/#{id}/role-mappings/realm/available")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get effective realm-level role mappings   This will recurse all composite roles to get the result.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :brief_representation (boolean()): if false, return roles with their attributes
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_groups_id_role_mappings_realm_composite_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_groups_id_role_mappings_realm_composite_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"briefRepresentation" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/groups/#{id}/role-mappings/realm/composite")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete realm-level role mappings

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_groups_id_role_mappings_realm_delete(Tesla.Env.client, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_groups_id_role_mappings_realm_delete(connection, realm, id, role_representation, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/groups/#{id}/role-mappings/realm")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get realm-level role mappings

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_groups_id_role_mappings_realm_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_groups_id_role_mappings_realm_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/groups/#{id}/role-mappings/realm")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Add realm-level role mappings to the user

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): Roles to add
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_groups_id_role_mappings_realm_post(Tesla.Env.client, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_groups_id_role_mappings_realm_post(connection, realm, id, role_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/groups/#{id}/role-mappings/realm")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get role mappings

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): User id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.MappingsRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_id_role_mappings_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.MappingsRepresentation.t} | {:error, Tesla.Env.t}
  def realm_users_id_role_mappings_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/users/#{id}/role-mappings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.MappingsRepresentation{}}
    ])
  end

  @doc """
  Get realm-level roles that can be mapped

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): User id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_id_role_mappings_realm_available_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_users_id_role_mappings_realm_available_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/users/#{id}/role-mappings/realm/available")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get effective realm-level role mappings   This will recurse all composite roles to get the result.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): User id
  - opts (KeywordList): [optional] Optional parameters
    - :brief_representation (boolean()): if false, return roles with their attributes
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_id_role_mappings_realm_composite_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_users_id_role_mappings_realm_composite_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"briefRepresentation" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/users/#{id}/role-mappings/realm/composite")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete realm-level role mappings

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): User id
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_id_role_mappings_realm_delete(Tesla.Env.client, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_users_id_role_mappings_realm_delete(connection, realm, id, role_representation, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/users/#{id}/role-mappings/realm")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get realm-level role mappings

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): User id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_id_role_mappings_realm_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_users_id_role_mappings_realm_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/users/#{id}/role-mappings/realm")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Add realm-level role mappings to the user

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): User id
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): Roles to add
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_id_role_mappings_realm_post(Tesla.Env.client, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_users_id_role_mappings_realm_post(connection, realm, id, role_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/users/#{id}/role-mappings/realm")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end
end
