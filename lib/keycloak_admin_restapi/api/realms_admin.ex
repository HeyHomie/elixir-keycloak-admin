# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.RealmsAdmin do
  @moduledoc """
  API calls for all endpoints tagged `RealmsAdmin`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Delete all admin events

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_admin_events_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_admin_events_delete(connection, realm, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/admin-events")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get admin events   Returns all admin events, or filters events based on URL query parameters listed here

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :auth_client (String.t): 
    - :auth_ip_address (String.t): 
    - :auth_realm (String.t): 
    - :auth_user (String.t): user id
    - :date_from (String.t): 
    - :date_to (String.t): 
    - :first (integer()): 
    - :max (integer()): Maximum results size (defaults to 100)
    - :operation_types ([String.t]): 
    - :resource_path (String.t): 
    - :resource_types ([String.t]): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_admin_events_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_admin_events_get(connection, realm, opts \\ []) do
    optional_params = %{
      :"authClient" => :query,
      :"authIpAddress" => :query,
      :"authRealm" => :query,
      :"authUser" => :query,
      :"dateFrom" => :query,
      :"dateTo" => :query,
      :"first" => :query,
      :"max" => :query,
      :"operationTypes" => :query,
      :"resourcePath" => :query,
      :"resourceTypes" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/admin-events")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Clear cache of external public keys (Public keys of clients or Identity providers)

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clear_keys_cache_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clear_keys_cache_post(connection, realm, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clear-keys-cache")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Clear realm cache

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clear_realm_cache_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clear_realm_cache_post(connection, realm, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clear-realm-cache")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Clear user cache

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clear_user_cache_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clear_user_cache_post(connection, realm, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clear-user-cache")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Base path for importing clients under this realm.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - body (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ClientRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_description_converter_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ClientRepresentation.t} | {:error, Tesla.Env.t}
  def realm_client_description_converter_post(connection, realm, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/client-description-converter")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ClientRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ClientPoliciesRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_policies_policies_get(Tesla.Env.client, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ClientPoliciesRepresentation.t} | {:error, Tesla.Env.t}
  def realm_client_policies_policies_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/client-policies/policies")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ClientPoliciesRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_policies_representation (ClientPoliciesRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_policies_policies_put(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.ClientPoliciesRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_client_policies_policies_put(connection, realm, client_policies_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/client-policies/policies")
    |> add_param(:body, :body, client_policies_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :include_global_profiles (boolean()): 
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ClientProfilesRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_policies_profiles_get(Tesla.Env.client, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ClientProfilesRepresentation.t} | {:error, Tesla.Env.t}
  def realm_client_policies_profiles_get(connection, realm, opts \\ []) do
    optional_params = %{
      :"include-global-profiles" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/client-policies/profiles")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ClientProfilesRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_profiles_representation (ClientProfilesRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_policies_profiles_put(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.ClientProfilesRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_client_policies_profiles_put(connection, realm, client_profiles_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/client-policies/profiles")
    |> add_param(:body, :body, client_profiles_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get client session stats   Returns a JSON map.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_client_session_stats_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_client_session_stats_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/client-session-stats")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_credential_registrators_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_credential_registrators_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/credential-registrators")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_default_client_scopes_client_scope_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_default_default_client_scopes_client_scope_id_delete(connection, realm, client_scope_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/default-default-client-scopes/#{client_scope_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_default_client_scopes_client_scope_id_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_default_default_client_scopes_client_scope_id_put(connection, realm, client_scope_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/default-default-client-scopes/#{client_scope_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get realm default client scopes.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_default_client_scopes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_default_default_client_scopes_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/default-default-client-scopes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get group hierarchy.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_groups_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_default_groups_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/default-groups")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - group_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_groups_group_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_default_groups_group_id_delete(connection, realm, group_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/default-groups/#{group_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - group_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_groups_group_id_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_default_groups_group_id_put(connection, realm, group_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/default-groups/#{group_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_optional_client_scopes_client_scope_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_default_optional_client_scopes_client_scope_id_delete(connection, realm, client_scope_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/default-optional-client-scopes/#{client_scope_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_optional_client_scopes_client_scope_id_put(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_default_optional_client_scopes_client_scope_id_put(connection, realm, client_scope_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/default-optional-client-scopes/#{client_scope_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get realm optional client scopes.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_default_optional_client_scopes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_default_optional_client_scopes_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/default-optional-client-scopes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete the realm

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_delete(connection, realm, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get the events provider configuration   Returns JSON object with events provider configuration

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.RealmEventsConfigRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_events_config_get(Tesla.Env.client, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.RealmEventsConfigRepresentation.t} | {:error, Tesla.Env.t}
  def realm_events_config_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/events/config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.RealmEventsConfigRepresentation{}}
    ])
  end

  @doc """
  Update the events provider   Change the events provider and/or its configuration

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - realm_events_config_representation (RealmEventsConfigRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_events_config_put(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.RealmEventsConfigRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_events_config_put(connection, realm, realm_events_config_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/events/config")
    |> add_param(:body, :body, realm_events_config_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Delete all events

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_events_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_events_delete(connection, realm, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/events")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get events   Returns all events, or filters them based on URL query parameters listed here

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :client (String.t): App or oauth client name
    - :date_from (String.t): From date
    - :date_to (String.t): To date
    - :first (integer()): Paging offset
    - :ip_address (String.t): IP address
    - :max (integer()): Maximum results size (defaults to 100)
    - :type ([String.t]): The types of events to return
    - :user (String.t): User id
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_events_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_events_get(connection, realm, opts \\ []) do
    optional_params = %{
      :"client" => :query,
      :"dateFrom" => :query,
      :"dateTo" => :query,
      :"first" => :query,
      :"ipAddress" => :query,
      :"max" => :query,
      :"type" => :query,
      :"user" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/events")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get the top-level representation of the realm   It will not include nested information like User and Client representations.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.RealmRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_get(Tesla.Env.client, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.RealmRepresentation.t} | {:error, Tesla.Env.t}
  def realm_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.RealmRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - path (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.GroupRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_group_by_path_path_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.GroupRepresentation.t} | {:error, Tesla.Env.t}
  def realm_group_by_path_path_get(connection, realm, path, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/group-by-path/#{path}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.GroupRepresentation{}}
    ])
  end

  @doc """
  Get LDAP supported extensions.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - test_ldap_connection_representation (TestLdapConnectionRepresentation): LDAP configuration
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_ldap_server_capabilities_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.TestLdapConnectionRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_ldap_server_capabilities_post(connection, realm, test_ldap_connection_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/ldap-server-capabilities")
    |> add_param(:body, :body, test_ldap_connection_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_localization_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/localization")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_localization_locale_delete(connection, realm, locale, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/localization/#{locale}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def realm_localization_locale_get(connection, realm, locale, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/localization/#{locale}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - key (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_key_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_localization_locale_key_delete(connection, realm, locale, key, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/localization/#{locale}/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - key (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_key_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def realm_localization_locale_key_get(connection, realm, locale, key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/localization/#{locale}/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - key (String.t): 
  - body (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_key_put(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_localization_locale_key_put(connection, realm, locale, key, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/localization/#{locale}/#{key}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - request_body (%{optional(String.t) => map()}): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_patch(Tesla.Env.client, String.t, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_localization_locale_patch(connection, realm, locale, request_body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/#{realm}/localization/#{locale}")
    |> add_param(:body, :body, request_body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Import localization from uploaded JSON file

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - locale (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_localization_locale_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_localization_locale_post(connection, realm, locale, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/localization/#{locale}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Removes all user sessions.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_logout_all_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_logout_all_post(connection, realm, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/logout-all")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Partial export of existing realm into a JSON file.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :export_clients (boolean()): 
    - :export_groups_and_roles (boolean()): 
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.RealmRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_partial_export_post(Tesla.Env.client, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.RealmRepresentation.t} | {:error, Tesla.Env.t}
  def realm_partial_export_post(connection, realm, opts \\ []) do
    optional_params = %{
      :"exportClients" => :query,
      :"exportGroupsAndRoles" => :query
    }
    %{}
    |> method(:post)
    |> url("/#{realm}/partial-export")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.RealmRepresentation{}}
    ])
  end

  @doc """
  Partial import from a JSON file to an existing realm.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - partial_import_representation (PartialImportRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_partial_import_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.PartialImportRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_partial_import_post(connection, realm, partial_import_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/partialImport")
    |> add_param(:body, :body, partial_import_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Push the realm’s revocation policy to any client that has an admin url associated with it.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_push_revocation_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_push_revocation_post(connection, realm, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/push-revocation")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - realm_representation (RealmRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_put(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.RealmRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_put(connection, realm, realm_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}")
    |> add_param(:body, :body, realm_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Remove a specific user session.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - session (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_sessions_session_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_sessions_session_delete(connection, realm, session, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/sessions/#{session}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Test LDAP connection

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - test_ldap_connection_representation (TestLdapConnectionRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_test_ldap_connection_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.TestLdapConnectionRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_test_ldap_connection_post(connection, realm, test_ldap_connection_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/testLDAPConnection")
    |> add_param(:body, :body, test_ldap_connection_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - request_body (%{optional(String.t) => map()}): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_test_smtp_connection_post(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_test_smtp_connection_post(connection, realm, request_body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/testSMTPConnection")
    |> add_param(:body, :body, request_body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_management_permissions_get(Tesla.Env.client, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_users_management_permissions_get(connection, realm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/users-management-permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - management_permission_reference (ManagementPermissionReference): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_users_management_permissions_put(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_users_management_permissions_put(connection, realm, management_permission_reference, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/users-management-permissions")
    |> add_param(:body, :body, management_permission_reference)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Import a realm   Imports a realm from a full representation of that realm.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm_representation (RealmRepresentation): JSON representation of the realm
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec root_post(Tesla.Env.client, KeycloakAdminRESTAPI.Model.RealmRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def root_post(connection, realm_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/")
    |> add_param(:body, :body, realm_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end
end
