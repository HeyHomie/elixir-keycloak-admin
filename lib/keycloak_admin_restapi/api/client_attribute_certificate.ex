# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.ClientAttributeCertificate do
  @moduledoc """
  API calls for all endpoints tagged `ClientAttributeCertificate`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Get a keystore file for the client, containing private key and public certificate

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - attr (String.t): 
  - key_store_config (KeyStoreConfig): Keystore configuration as JSON
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, binary()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_certificates_attr_download_post(Tesla.Env.client, String.t, String.t, String.t, KeycloakAdminRESTAPI.Model.KeyStoreConfig.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def realm_clients_id_certificates_attr_download_post(connection, realm, id, attr, key_store_config, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/certificates/#{attr}/download")
    |> add_param(:body, :body, key_store_config)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - attr (String.t): 
  - key_store_config (KeyStoreConfig): Keystore configuration as JSON
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, binary()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_certificates_attr_generate_and_download_post(Tesla.Env.client, String.t, String.t, String.t, KeycloakAdminRESTAPI.Model.KeyStoreConfig.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def realm_clients_id_certificates_attr_generate_and_download_post(connection, realm, id, attr, key_store_config, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/certificates/#{attr}/generate-and-download")
    |> add_param(:body, :body, key_store_config)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Generate a new certificate with new key pair

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - attr (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_certificates_attr_generate_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_certificates_attr_generate_post(connection, realm, id, attr, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/certificates/#{attr}/generate")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.CertificateRepresentation{}}
    ])
  end

  @doc """
  Get key info

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - attr (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_certificates_attr_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_certificates_attr_get(connection, realm, id, attr, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/certificates/#{attr}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.CertificateRepresentation{}}
    ])
  end

  @doc """
  Upload only certificate, not private key

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - attr (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_certificates_attr_upload_certificate_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_certificates_attr_upload_certificate_post(connection, realm, id, attr, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/certificates/#{attr}/upload-certificate")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.CertificateRepresentation{}}
    ])
  end

  @doc """
  Upload certificate and eventually private key

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - attr (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_certificates_attr_upload_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.CertificateRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_certificates_attr_upload_post(connection, realm, id, attr, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/certificates/#{attr}/upload")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.CertificateRepresentation{}}
    ])
  end
end
