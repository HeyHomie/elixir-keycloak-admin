# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.Roles do
  @moduledoc """
  API calls for all endpoints tagged `Roles`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Get all roles for the realm or client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :brief_representation (boolean()): 
    - :first (integer()): 
    - :max (integer()): 
    - :search (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"briefRepresentation" => :query,
      :"first" => :query,
      :"max" => :query,
      :"search" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Create a new role for the realm or client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_representation (RoleRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_post(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.RoleRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_post(connection, realm, id, role_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/roles")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get client-level roles for the client that are in the role’s composite

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - client_uuid (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_composites_clients_client_uuid_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_composites_clients_client_uuid_get(connection, realm, id, role_name, client_uuid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/composites/clients/#{client_uuid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Remove roles from the role’s composite

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): roles to remove
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_composites_delete(Tesla.Env.client, String.t, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_composites_delete(connection, realm, id, role_name, role_representation, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/composites")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get composites of the role

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_composites_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_composites_get(connection, realm, id, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/composites")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Add a composite to the role

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_composites_post(Tesla.Env.client, String.t, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_composites_post(connection, realm, id, role_name, role_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/composites")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get realm-level roles of the role’s composite

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_composites_realm_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_composites_realm_get(connection, realm, id, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/composites/realm")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete a role by name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_delete(connection, realm, id, role_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get a role by name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.RoleRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.RoleRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_get(connection, realm, id, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.RoleRepresentation{}}
    ])
  end

  @doc """
  Returns a stream of groups that have the specified role name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): the role name.
  - opts (KeywordList): [optional] Optional parameters
    - :brief_representation (boolean()): if false, return a full representation of the {@code GroupRepresentation} objects.
    - :first (integer()): first result to return. Ignored if negative or {@code null}.
    - :max (integer()): maximum number of results to return. Ignored if negative or {@code null}.
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_groups_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_groups_get(connection, realm, id, role_name, opts \\ []) do
    optional_params = %{
      :"briefRepresentation" => :query,
      :"first" => :query,
      :"max" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Return object stating whether role Authorization permissions have been initialized or not and a reference

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_management_permissions_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_management_permissions_get(connection, realm, id, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/management/permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Return object stating whether role Authorization permissions have been initialized or not and a reference

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): 
  - management_permission_reference (ManagementPermissionReference): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_management_permissions_put(Tesla.Env.client, String.t, String.t, String.t, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_management_permissions_put(connection, realm, id, role_name, management_permission_reference, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/management/permissions")
    |> add_param(:body, :body, management_permission_reference)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Update a role by name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): role’s name (not id!)
  - role_representation (RoleRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_put(Tesla.Env.client, String.t, String.t, String.t, KeycloakAdminRESTAPI.Model.RoleRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_put(connection, realm, id, role_name, role_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Returns a stream of users that have the specified role name.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_name (String.t): the role name.
  - opts (KeywordList): [optional] Optional parameters
    - :first (integer()): first result to return. Ignored if negative or {@code null}.
    - :max (integer()): maximum number of results to return. Ignored if negative or {@code null}.
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_roles_role_name_users_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_roles_role_name_users_get(connection, realm, id, role_name, opts \\ []) do
    optional_params = %{
      :"first" => :query,
      :"max" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/roles/#{role_name}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get all roles for the realm or client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :brief_representation (boolean()): 
    - :first (integer()): 
    - :max (integer()): 
    - :search (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_roles_get(connection, realm, opts \\ []) do
    optional_params = %{
      :"briefRepresentation" => :query,
      :"first" => :query,
      :"max" => :query,
      :"search" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/roles")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Create a new role for the realm or client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_representation (RoleRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.RoleRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_roles_post(connection, realm, role_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/roles")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get client-level roles for the client that are in the role’s composite

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - client_uuid (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_composites_clients_client_uuid_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_roles_role_name_composites_clients_client_uuid_get(connection, realm, role_name, client_uuid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}/composites/clients/#{client_uuid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Remove roles from the role’s composite

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): roles to remove
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_composites_delete(Tesla.Env.client, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_roles_role_name_composites_delete(connection, realm, role_name, role_representation, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/roles/#{role_name}/composites")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get composites of the role

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_composites_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_roles_role_name_composites_get(connection, realm, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}/composites")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Add a composite to the role

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - role_representation ([KeycloakAdminRESTAPI.Model.RoleRepresentation.t]): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_composites_post(Tesla.Env.client, String.t, String.t, list(KeycloakAdminRESTAPI.Model.RoleRepresentation.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_roles_role_name_composites_post(connection, realm, role_name, role_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/roles/#{role_name}/composites")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get realm-level roles of the role’s composite

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_composites_realm_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_roles_role_name_composites_realm_get(connection, realm, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}/composites/realm")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete a role by name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_roles_role_name_delete(connection, realm, role_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/roles/#{role_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get a role by name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.RoleRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.RoleRepresentation.t} | {:error, Tesla.Env.t}
  def realm_roles_role_name_get(connection, realm, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.RoleRepresentation{}}
    ])
  end

  @doc """
  Returns a stream of groups that have the specified role name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): the role name.
  - opts (KeywordList): [optional] Optional parameters
    - :brief_representation (boolean()): if false, return a full representation of the {@code GroupRepresentation} objects.
    - :first (integer()): first result to return. Ignored if negative or {@code null}.
    - :max (integer()): maximum number of results to return. Ignored if negative or {@code null}.
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_groups_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_roles_role_name_groups_get(connection, realm, role_name, opts \\ []) do
    optional_params = %{
      :"briefRepresentation" => :query,
      :"first" => :query,
      :"max" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}/groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Return object stating whether role Authorization permissions have been initialized or not and a reference

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_management_permissions_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_roles_role_name_management_permissions_get(connection, realm, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}/management/permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Return object stating whether role Authorization permissions have been initialized or not and a reference

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): 
  - management_permission_reference (ManagementPermissionReference): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_management_permissions_put(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_roles_role_name_management_permissions_put(connection, realm, role_name, management_permission_reference, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/roles/#{role_name}/management/permissions")
    |> add_param(:body, :body, management_permission_reference)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Update a role by name

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): role’s name (not id!)
  - role_representation (RoleRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_put(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.RoleRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_roles_role_name_put(connection, realm, role_name, role_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/roles/#{role_name}")
    |> add_param(:body, :body, role_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Returns a stream of users that have the specified role name.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - role_name (String.t): the role name.
  - opts (KeywordList): [optional] Optional parameters
    - :first (integer()): first result to return. Ignored if negative or {@code null}.
    - :max (integer()): maximum number of results to return. Ignored if negative or {@code null}.
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_roles_role_name_users_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_roles_role_name_users_get(connection, realm, role_name, opts \\ []) do
    optional_params = %{
      :"first" => :query,
      :"max" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/roles/#{role_name}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end
end
