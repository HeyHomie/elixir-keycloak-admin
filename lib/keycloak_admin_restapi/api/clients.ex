# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.Clients do
  @moduledoc """
  API calls for all endpoints tagged `Clients`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Get clients belonging to the realm   Returns a list of clients belonging to the realm

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :client_id (String.t): filter by clientId
    - :first (integer()): the first result
    - :max (integer()): the max results to return
    - :q (String.t): 
    - :search (boolean()): whether this is a search query or a getClientById query
    - :viewable_only (boolean()): filter clients that cannot be viewed in full by admin
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_get(connection, realm, opts \\ []) do
    optional_params = %{
      :"clientId" => :query,
      :"first" => :query,
      :"max" => :query,
      :"q" => :query,
      :"search" => :query,
      :"viewableOnly" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get the client secret

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.CredentialRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_client_secret_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.CredentialRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_client_secret_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/client-secret")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.CredentialRepresentation{}}
    ])
  end

  @doc """
  Generate a new secret for the client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.CredentialRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_client_secret_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.CredentialRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_client_secret_post(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/client-secret")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.CredentialRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_default_client_scopes_client_scope_id_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_default_client_scopes_client_scope_id_delete(connection, realm, id, client_scope_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/clients/#{id}/default-client-scopes/#{client_scope_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_default_client_scopes_client_scope_id_put(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_default_client_scopes_client_scope_id_put(connection, realm, id, client_scope_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/clients/#{id}/default-client-scopes/#{client_scope_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get default client scopes.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_default_client_scopes_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_default_client_scopes_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/default-client-scopes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Delete the client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_delete(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/clients/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Create JSON with payload of example access token

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): 
    - :user_id (String.t): 
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.AccessToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_evaluate_scopes_generate_example_access_token_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.AccessToken.t} | {:error, Tesla.Env.t}
  def realm_clients_id_evaluate_scopes_generate_example_access_token_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"scope" => :query,
      :"userId" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/evaluate-scopes/generate-example-access-token")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.AccessToken{}}
    ])
  end

  @doc """
  Create JSON with payload of example id token

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): 
    - :user_id (String.t): 
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.IdToken.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_evaluate_scopes_generate_example_id_token_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.IdToken.t} | {:error, Tesla.Env.t}
  def realm_clients_id_evaluate_scopes_generate_example_id_token_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"scope" => :query,
      :"userId" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/evaluate-scopes/generate-example-id-token")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.IdToken{}}
    ])
  end

  @doc """
  Create JSON with payload of example user info

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): 
    - :user_id (String.t): 
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_evaluate_scopes_generate_example_userinfo_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def realm_clients_id_evaluate_scopes_generate_example_userinfo_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"scope" => :query,
      :"userId" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/evaluate-scopes/generate-example-userinfo")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %{}}
    ])
  end

  @doc """
  Return list of all protocol mappers, which will be used when generating tokens issued for particular client.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_evaluate_scopes_protocol_mappers_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_evaluate_scopes_protocol_mappers_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"scope" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/evaluate-scopes/protocol-mappers")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_container_id (String.t): either realm name OR client UUID
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get(connection, realm, id, role_container_id, opts \\ []) do
    optional_params = %{
      :"scope" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/evaluate-scopes/scope-mappings/#{role_container_id}/granted")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - role_container_id (String.t): either realm name OR client UUID
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get(connection, realm, id, role_container_id, opts \\ []) do
    optional_params = %{
      :"scope" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/evaluate-scopes/scope-mappings/#{role_container_id}/not-granted")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Get representation of the client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ClientRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ClientRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ClientRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - provider_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_installation_providers_provider_id_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_installation_providers_provider_id_get(connection, realm, id, provider_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/installation/providers/#{provider_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Return object stating whether client Authorization permissions have been initialized or not and a reference

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_management_permissions_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_clients_id_management_permissions_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/management/permissions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Return object stating whether client Authorization permissions have been initialized or not and a reference

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - management_permission_reference (ManagementPermissionReference): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_management_permissions_put(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ManagementPermissionReference.t} | {:error, Tesla.Env.t}
  def realm_clients_id_management_permissions_put(connection, realm, id, management_permission_reference, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/clients/#{id}/management/permissions")
    |> add_param(:body, :body, management_permission_reference)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ManagementPermissionReference{}}
    ])
  end

  @doc """
  Unregister a cluster node from the client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - node (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_nodes_node_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_nodes_node_delete(connection, realm, id, node, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/clients/#{id}/nodes/#{node}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - request_body (%{optional(String.t) => map()}): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_nodes_post(Tesla.Env.client, String.t, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_nodes_post(connection, realm, id, request_body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/nodes")
    |> add_param(:body, :body, request_body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get application offline session count   Returns a number of offline user sessions associated with this client   {      \"count\": number  }

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_offline_session_count_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def realm_clients_id_offline_session_count_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/offline-session-count")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %{}}
    ])
  end

  @doc """
  Get offline sessions for client   Returns a list of offline user sessions associated with this client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :first (integer()): Paging offset
    - :max (integer()): Maximum results size (defaults to 100)
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_offline_sessions_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_offline_sessions_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"first" => :query,
      :"max" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/offline-sessions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_optional_client_scopes_client_scope_id_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_optional_client_scopes_client_scope_id_delete(connection, realm, id, client_scope_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/clients/#{id}/optional-client-scopes/#{client_scope_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - client_scope_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_optional_client_scopes_client_scope_id_put(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_optional_client_scopes_client_scope_id_put(connection, realm, id, client_scope_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/clients/#{id}/optional-client-scopes/#{client_scope_id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Get optional client scopes.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_optional_client_scopes_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_optional_client_scopes_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/optional-client-scopes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.GlobalRequestResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_push_revocation_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.GlobalRequestResult.t} | {:error, Tesla.Env.t}
  def realm_clients_id_push_revocation_post(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/push-revocation")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.GlobalRequestResult{}}
    ])
  end

  @doc """
  Update the client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - client_representation (ClientRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_put(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.ClientRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_id_put(connection, realm, id, client_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/clients/#{id}")
    |> add_param(:body, :body, client_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Generate a new registration access token for the client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ClientRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_registration_access_token_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ClientRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_registration_access_token_post(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients/#{id}/registration-access-token")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ClientRepresentation{}}
    ])
  end

  @doc """
  Get a user dedicated to the service account

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.UserRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_service_account_user_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.UserRepresentation.t} | {:error, Tesla.Env.t}
  def realm_clients_id_service_account_user_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/service-account-user")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.UserRepresentation{}}
    ])
  end

  @doc """
  Get application session count   Returns a number of user sessions associated with this client   {      \"count\": number  }

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_session_count_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def realm_clients_id_session_count_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/session-count")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %{}}
    ])
  end

  @doc """
  Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.GlobalRequestResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_test_nodes_available_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.GlobalRequestResult.t} | {:error, Tesla.Env.t}
  def realm_clients_id_test_nodes_available_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/test-nodes-available")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.GlobalRequestResult{}}
    ])
  end

  @doc """
  Get user sessions for client   Returns a list of user sessions associated with this client

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): id of client (not client-id)
  - opts (KeywordList): [optional] Optional parameters
    - :first (integer()): Paging offset
    - :max (integer()): Maximum results size (defaults to 100)
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_id_user_sessions_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_clients_id_user_sessions_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"first" => :query,
      :"max" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/clients/#{id}/user-sessions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """
  Create a new client   Client’s client_id must be unique!

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - client_representation (ClientRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_clients_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.ClientRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_clients_post(connection, realm, client_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/clients")
    |> add_param(:body, :body, client_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end
end
