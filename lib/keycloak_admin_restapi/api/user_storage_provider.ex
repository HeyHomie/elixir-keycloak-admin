# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.UserStorageProvider do
  @moduledoc """
  API calls for all endpoints tagged `UserStorageProvider`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """
  Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec id_name_get(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def id_name_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{id}/name")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %{}}
    ])
  end

  @doc """
  Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_user_storage_id_name_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def realm_user_storage_id_name_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/user-storage/#{id}/name")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %{}}
    ])
  end

  @doc """
  Remove imported users

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_user_storage_id_remove_imported_users_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_user_storage_id_remove_imported_users_post(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/user-storage/#{id}/remove-imported-users")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Trigger sync of users   Action can be \"triggerFullSync\" or \"triggerChangedUsersSync\"

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :action (String.t): 
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.SynchronizationResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_user_storage_id_sync_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.SynchronizationResult.t} | {:error, Tesla.Env.t}
  def realm_user_storage_id_sync_post(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"action" => :query
    }
    %{}
    |> method(:post)
    |> url("/#{realm}/user-storage/#{id}/sync")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.SynchronizationResult{}}
    ])
  end

  @doc """
  Unlink imported users from a storage provider

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_user_storage_id_unlink_users_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_user_storage_id_unlink_users_post(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/user-storage/#{id}/unlink-users")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is \"fedToKeycloak\" or \"keycloakToFed\"

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - parent_id (String.t): 
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :direction (String.t): 
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.SynchronizationResult.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_user_storage_parent_id_mappers_id_sync_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.SynchronizationResult.t} | {:error, Tesla.Env.t}
  def realm_user_storage_parent_id_mappers_id_sync_post(connection, realm, parent_id, id, opts \\ []) do
    optional_params = %{
      :"direction" => :query
    }
    %{}
    |> method(:post)
    |> url("/#{realm}/user-storage/#{parent_id}/mappers/#{id}/sync")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.SynchronizationResult{}}
    ])
  end
end
