# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Api.Component do
  @moduledoc """
  API calls for all endpoints tagged `Component`.
  """

  alias KeycloakAdminRESTAPI.Connection
  import KeycloakAdminRESTAPI.RequestBuilder


  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - opts (KeywordList): [optional] Optional parameters
    - :name (String.t): 
    - :parent (String.t): 
    - :type (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_components_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_components_get(connection, realm, opts \\ []) do
    optional_params = %{
      :"name" => :query,
      :"parent" => :query,
      :"type" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/components")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_components_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_components_id_delete(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{realm}/components/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, KeycloakAdminRESTAPI.Model.ComponentRepresentation.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_components_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KeycloakAdminRESTAPI.Model.ComponentRepresentation.t} | {:error, Tesla.Env.t}
  def realm_components_id_get(connection, realm, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{realm}/components/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", %KeycloakAdminRESTAPI.Model.ComponentRepresentation{}}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - component_representation (ComponentRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_components_id_put(Tesla.Env.client, String.t, String.t, KeycloakAdminRESTAPI.Model.ComponentRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_components_id_put(connection, realm, id, component_representation, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{realm}/components/#{id}")
    |> add_param(:body, :body, component_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end

  @doc """
  List of subcomponent types that are available to configure for a particular parent component.

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :type (String.t): 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_components_id_sub_component_types_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def realm_components_id_sub_component_types_get(connection, realm, id, opts \\ []) do
    optional_params = %{
      :"type" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{realm}/components/#{id}/sub-component-types")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", []}
    ])
  end

  @doc """

  ## Parameters

  - connection (KeycloakAdminRESTAPI.Connection): Connection to server
  - realm (String.t): realm name (not id!)
  - component_representation (ComponentRepresentation): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec realm_components_post(Tesla.Env.client, String.t, KeycloakAdminRESTAPI.Model.ComponentRepresentation.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def realm_components_post(connection, realm, component_representation, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/#{realm}/components")
    |> add_param(:body, :body, component_representation)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { "2XX", false}
    ])
  end
end
