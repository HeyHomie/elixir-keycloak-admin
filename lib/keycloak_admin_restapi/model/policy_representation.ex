# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule KeycloakAdminRESTAPI.Model.PolicyRepresentation do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :"config",
    :"decisionStrategy",
    :"description",
    :"id",
    :"logic",
    :"name",
    :"owner",
    :"policies",
    :"resources",
    :"resourcesData",
    :"scopes",
    :"scopesData",
    :"type"
  ]

  @type t :: %__MODULE__{
    :"config" => %{optional(String.t) => map()} | nil,
    :"decisionStrategy" => String.t | nil,
    :"description" => String.t | nil,
    :"id" => String.t | nil,
    :"logic" => String.t | nil,
    :"name" => String.t | nil,
    :"owner" => String.t | nil,
    :"policies" => [String.t] | nil,
    :"resources" => [String.t] | nil,
    :"resourcesData" => [KeycloakAdminRESTAPI.Model.ResourceRepresentation.t] | nil,
    :"scopes" => [String.t] | nil,
    :"scopesData" => [KeycloakAdminRESTAPI.Model.ScopeRepresentation.t] | nil,
    :"type" => String.t | nil
  }
end

defimpl Poison.Decoder, for: KeycloakAdminRESTAPI.Model.PolicyRepresentation do
  import KeycloakAdminRESTAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"resourcesData", :list, KeycloakAdminRESTAPI.Model.ResourceRepresentation, options)
    |> deserialize(:"scopesData", :list, KeycloakAdminRESTAPI.Model.ScopeRepresentation, options)
  end
end

